#!/usr/bin/env python3
"""
Script de calibration compl√®te - ex√©cute s√©quentiellement tous les processus
"""
from config_charuco import get_config
import subprocess
import sys
import os
import time

class FullCalibration:
    def __init__(self):
        self.script_dir = os.path.dirname(__file__)
        
    def run_script(self, script_name, description):
        """Ex√©cuter un script et attendre sa completion"""
        print(f"\n{'='*60}")
        print(f"√âTAPE: {description}")
        print(f"{'='*60}")
        
        script_path = os.path.join(self.script_dir, script_name)
        
        if not os.path.exists(script_path):
            print(f"ERREUR: Script {script_name} non trouv√©!")
            return False
        
        try:
            # Lancer le script et attendre sa completion
            result = subprocess.run([sys.executable, script_path], 
                                  capture_output=False, 
                                  text=True)
            
            if result.returncode == 0:
                print(f"\n‚úì {description} termin√© avec succ√®s")
                return True
            else:
                print(f"\n‚úó Erreur lors de {description}")
                return False
                
        except Exception as e:
            print(f"ERREUR lors de l'ex√©cution de {script_name}: {str(e)}")
            return False
    
    def run_full_calibration(self):
        """Ex√©cuter la calibration compl√®te"""
        print("=== CALIBRATION ST√âR√âO COMPL√àTE ===")
        print("Ce processus va ex√©cuter les √©tapes suivantes:")
        print("1. Enregistrement d'images de calibration")
        print("2. Calibration intrins√®que des deux cam√©ras")
        print("3. Calibration st√©r√©o")
        print("\nAppuyez sur Entr√©e pour commencer ou Ctrl+C pour annuler...")
        
        try:
            input()
        except KeyboardInterrupt:
            print("\nProcessus annul√© par l'utilisateur")
            return False
        
        start_time = time.time()
        
        # √âtape 1: Enregistrement d'images
        if not self.run_script("calibration_charuco_recording.py", 
                              "Enregistrement d'images de calibration"):
            print("√âchec de l'enregistrement d'images. Arr√™t du processus.")
            return False
        
        print("\nAppuyez sur Entr√©e pour continuer avec la calibration intrins√®que...")
        try:
            input()
        except KeyboardInterrupt:
            print("\nProcessus annul√© par l'utilisateur")
            return False
        
        # √âtape 2: Calibration intrins√®que
        if not self.run_script("calibration_instrinsec_charuco.py", 
                              "Calibration intrins√®que des deux cam√©ras"):
            print("√âchec de la calibration intrins√®que. Arr√™t du processus.")
            return False
        
        print("\nAppuyez sur Entr√©e pour continuer avec la calibration st√©r√©o...")
        try:
            input()
        except KeyboardInterrupt:
            print("\nProcessus annul√© par l'utilisateur")
            return False
        
        # √âtape 3: Calibration st√©r√©o
        if not self.run_script("calibration_stereo_charuco.py", 
                              "Calibration st√©r√©o"):
            print("√âchec de la calibration st√©r√©o. Arr√™t du processus.")
            return False
        
        # R√©sum√© final
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"\n{'='*60}")
        print("üéâ CALIBRATION COMPL√àTE TERMIN√âE AVEC SUCC√àS!")
        print(f"{'='*60}")
        print(f"Dur√©e totale: {duration/60:.1f} minutes")
        print("\nFichiers g√©n√©r√©s:")
        print("- camera_1_calibration.yaml (param√®tres intrins√®ques cam√©ra 1)")
        print("- camera_2_calibration.yaml (param√®tres intrins√®ques cam√©ra 2)")
        print("- stereo_calibration.yaml (param√®tres st√©r√©o pour triangulation)")
        print("\nVous pouvez maintenant utiliser ces param√®tres pour la vision st√©r√©o!")
        
        return True

def main():
    calibrator = FullCalibration()
    success = calibrator.run_full_calibration()
    
    if success:
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()

"""
# TESTS
# Pour tester ce script:
# 1. Assurez-vous que tous les autres scripts sont dans le m√™me r√©pertoire
# 2. V√©rifiez que les cam√©ras sont connect√©es et fonctionnelles
# 3. Pr√©parez un plateau Charuco avec les bonnes dimensions
# 4. Lancez: python calibration_full_charuco.py
# 5. Suivez les instructions √† l'√©cran pour chaque √©tape
# 6. V√©rifiez que chaque √©tape se termine sans erreur
# 7. Contr√¥lez que tous les fichiers de calibration sont g√©n√©r√©s
# 8. Testez l'interruption du processus avec Ctrl+C
# 9. V√©rifiez que les erreurs de calibration sont dans des limites acceptables
"""